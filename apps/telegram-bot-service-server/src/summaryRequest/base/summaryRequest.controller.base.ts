/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SummaryRequestService } from "../summaryRequest.service";
import { SummaryRequestCreateInput } from "./SummaryRequestCreateInput";
import { SummaryRequest } from "./SummaryRequest";
import { SummaryRequestFindManyArgs } from "./SummaryRequestFindManyArgs";
import { SummaryRequestWhereUniqueInput } from "./SummaryRequestWhereUniqueInput";
import { SummaryRequestUpdateInput } from "./SummaryRequestUpdateInput";

export class SummaryRequestControllerBase {
  constructor(protected readonly service: SummaryRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SummaryRequest })
  async createSummaryRequest(
    @common.Body() data: SummaryRequestCreateInput
  ): Promise<SummaryRequest> {
    return await this.service.createSummaryRequest({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SummaryRequest] })
  @ApiNestedQuery(SummaryRequestFindManyArgs)
  async summaryRequests(
    @common.Req() request: Request
  ): Promise<SummaryRequest[]> {
    const args = plainToClass(SummaryRequestFindManyArgs, request.query);
    return this.service.summaryRequests({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SummaryRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async summaryRequest(
    @common.Param() params: SummaryRequestWhereUniqueInput
  ): Promise<SummaryRequest | null> {
    const result = await this.service.summaryRequest({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SummaryRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSummaryRequest(
    @common.Param() params: SummaryRequestWhereUniqueInput,
    @common.Body() data: SummaryRequestUpdateInput
  ): Promise<SummaryRequest | null> {
    try {
      return await this.service.updateSummaryRequest({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SummaryRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSummaryRequest(
    @common.Param() params: SummaryRequestWhereUniqueInput
  ): Promise<SummaryRequest | null> {
    try {
      return await this.service.deleteSummaryRequest({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
