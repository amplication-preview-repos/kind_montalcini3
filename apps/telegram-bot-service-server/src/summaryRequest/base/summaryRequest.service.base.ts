/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SummaryRequest as PrismaSummaryRequest } from "@prisma/client";

export class SummaryRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SummaryRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.summaryRequest.count(args);
  }

  async summaryRequests(
    args: Prisma.SummaryRequestFindManyArgs
  ): Promise<PrismaSummaryRequest[]> {
    return this.prisma.summaryRequest.findMany(args);
  }
  async summaryRequest(
    args: Prisma.SummaryRequestFindUniqueArgs
  ): Promise<PrismaSummaryRequest | null> {
    return this.prisma.summaryRequest.findUnique(args);
  }
  async createSummaryRequest(
    args: Prisma.SummaryRequestCreateArgs
  ): Promise<PrismaSummaryRequest> {
    return this.prisma.summaryRequest.create(args);
  }
  async updateSummaryRequest(
    args: Prisma.SummaryRequestUpdateArgs
  ): Promise<PrismaSummaryRequest> {
    return this.prisma.summaryRequest.update(args);
  }
  async deleteSummaryRequest(
    args: Prisma.SummaryRequestDeleteArgs
  ): Promise<PrismaSummaryRequest> {
    return this.prisma.summaryRequest.delete(args);
  }
}
